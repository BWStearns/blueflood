{"name":"Blueflood","tagline":"","body":"Blueflood\r\n===================================================\r\n\r\n# Introduction\r\nBlueflood is a distributed system designed to ingest and process time series data generated by other systems. It has three primary functions: metrics ingestion, rollup consolidation, and data query.\r\n\r\n# Benefits\r\n* **Simple**: It is easy to get metrics data in and out of Blueflood. To collect metrics, write your code to collect metrics as often as you need and push the data to blueflood instance. To retrieve metrics, specify the time window and the number of data point you need and let Blueflood choose the data with the right granularity.\r\n* **Scalable**: Blueflood is designed to handle large data volume for ingestion, and can return data quickly for query\r\n* **Production tested**: Blueflood is currently used internally at Rackspace to support Cloud Monitoring. It is under active development.\r\n\r\n# Features\r\n## Metrics Ingestion\r\nAfter collecting the metric data, post them to Blueflood in the following json format to \"/metrics\". Blueflood will store them as raw data until specific time to live. \r\n\r\n```JavaScript\r\n[\r\n    {\r\n        \"collectionTime\": 1375217024200,\r\n        \"ttlInSeconds\": 172800,\r\n        \"metricValue\": 57.969165995652595,\r\n        \"accountId\": \"acDemo\",\r\n        \"unit\": \"seconds\",\r\n        \"metricName\": \"metricDemo\"\r\n    }\r\n]\r\n```\r\n\r\n## Rollup Consolidation\r\nBlueflood nodes that are configured with Rollup mode will read the raw data and calculate the aggregates at different granularity for the data query (see below).\r\n\r\n## Data Query\r\nThe Data Query API is design to prefer low latency over throughput and works best with structured iterations. The goal is to support the iterative metrics analysis that is triggered from alerts, dashboard or long term planning.\r\n\r\nThe data retrieved through the API (To be documented futher) is like the following. Note how these two data points are the aggregation of 30 and 50 time series data, respectively.\r\n\r\n```JavaScript\r\n[\r\n    {\r\n        \"rawSample\": null,\r\n        \"min\": 57.969165995652595,\r\n        \"timestamp\": 1375216800000,\r\n        \"average\": 57.969165995652595,\r\n        \"numPoints\": 30,\r\n        \"max\": 57.969165995652595,\r\n        \"variance\": 0.0,\r\n        \"unit\": \"seconds\"\r\n    },\r\n    {\r\n        \"rawSample\": null,\r\n        \"min\": -3.4548969891396766,\r\n        \"timestamp\": 1375222800000,\r\n        \"average\": 44.396379776671381,\r\n        \"numPoints\": 50,\r\n        \"max\": 98.44178907359634,\r\n        \"variance\": 649.09993657276527,\r\n        \"unit\": \"seconds\"\r\n    }\r\n```\r\n\r\n# External Links\r\n* Details for the project are documented at [wiki](https://github.com/rackerlabs/blueflood/wiki) for building, deployment, management and performance tuning\r\n* Mailing list is at (link TBD)\r\n* Log your issues at [project issue page](https://github.com/rackerlabs/blueflood/issues) and they will be vetted before converting to the development issue JIRA project (link TBD)\r\n* Blueflood is hosted on [GitHub rackerlabs](https://github.com/rackerlabs/blueflood)\r\n* Blueflood is in product at [Rackspace](https://www.rackspace.com/) to support [Cloud Monitoring](http://www.rackspace.com/cloud/monitoring/) \r\n\r\n","google":"UA-42769648-1","note":"Don't delete this file! It's used internally to help with page regeneration."}