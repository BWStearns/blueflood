{"name":"Blueflood","tagline":"","body":"Blueflood - Metrics Ingestor and Rollup Coordinator\r\n===================================================\r\n\r\n# Introduction\r\n\r\n# Getting Started\r\n\r\nBuilding\r\n--------\r\nThe Blueflood distribution gets created as part of `ant dist`.  If you're\r\nimpatient `ant jar-bf` will create the jar for you without assembling the\r\ndependencies.\r\n\r\nRunning\r\n-------\r\nSeveral settings are important to set at runtime:\r\n\r\n* __blueflood.config__: URL pointing to a valid Blueflood configuration file.\r\n  An [annotated config file](https://github.com/racker/ele/blob/rollups2/java/conf/bf-dev.conf)\r\n  is stored in github.\r\n* __log4j.configuration__: Standard log4j configuration URL.\r\n* __com.sun.management.jmxremote.authenticate__: normally false.\r\n* __com.sun.management.jmxremote.ssl__: normally false\r\n* __java.rmi.server.hostname__: specifies the interface that JMX will bind to. This\r\n  value defaults to 0.0.0.0.\r\n* __com.sun.management.jmxremote.port__: specifies the port JMX will listen on.\r\n  This value defaults to 8080.\r\n\r\n# Tuning\r\n\r\nBlueflood can be tuned at runtime to adjust to changing metric patterns. This\r\nis accomplished by exposing many settings through [JMX](http://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html).\r\n\r\n## RollupService\r\n* __Active__: indicates that rollups can be scheduled. There is a poll method \r\n  that always looks for opportunities to schedule rollups, but none will be\r\n  scheduled unless this flag is set.  After setting to __false__ it may take\r\n  some time for pending rollups to drain.\r\n* __InFlightRollupCount__: the number of rollups being executed right now.\r\n* __KeepingServertime__: indicates whether or not the node is actively\r\n  updating its clock (set to __false__ to control this externally).\r\n* __PollerPeriod__: controls the frequency (in milliseconds) between when\r\n  the RollupService looks for rollups that may be scheduled. A shorter period\r\n  will result in the map of updates getting scanned more often (tightening\r\n  rollup latency somewhat).\r\n* __QueuedRollupCount__: the number of rollups waiting to be executed. This\r\n  number is always much lower than the number of rollups that could be\r\n  executed.\r\n* __RollupConcurrency__: specifies the size of the threadpool that will\r\n  perform rollups.  If QueuedRollupCount seems to be growing, increasing this\r\n  value should allow more rollups to be executed.\r\n* __ScheduledSlotCheckCount__: the number of slots that are scheduled and need\r\n  to be rolled up. If your server is having a hard time keeping up this\r\n  value will be high.  \"High\" is usually determined as some multiple of\r\n  the number of shards this hode is responsible for.\r\n* __SlotCheckConcurrency__: specifies the number of threads that process the\r\n  scheduled checks.  Increasing this means that more rollups will be enqueued\r\n  and will be available for execution.  If you set this value too high, you \r\n  will enqueue a lot of rollups and consume a lot of memory.\r\n\r\nThe goal of these tunables is to allow flexible configuration so that a rollup\r\nslave will always have rollups to execute when they are available.\r\n\r\n### Poll Timer\r\nMonitors how long it takes for the poll() method to look for schedulable slots.\r\nIf poll times are unacceptably high, you should consider adding another\r\nrollup slave.  See also RollupService.PollPeriod.\r\n\r\n### Rejected Slot Checks\r\nMonitors how often slot checks are rejected because no thread is available to \r\nservice the request.  If this is regularly happening, you may wish to increase\r\nRollupService.PollPeriod.\r\n\r\n### Rollup Execution Timer\r\nMonitors rollup execution throughput. Keeps track of how many rollups have been\r\nexecuted, how long it takes and current rates of processing.  This is the best\r\nguage of overall processing throughput.\r\n\r\n### Rollup Wait Histogram\r\nMonitors how long it takes from the time a rollup is enqueued until it is started.\r\nWhen this value is high, it means that you may be enqueuing more rollups than the\r\nnumber of threads specified and RollupService.RollupConcurrency can handle.\r\n\r\n## ScribeHandler\r\nMonitors:\r\n\r\n* how long scribe Log() calls are taking.\r\n* number of thrift messages received on the scribe interface.\r\n* how much time is spent deserializing thrift messages.\r\n\r\n## ShardStatePuller/ShardStatePusher\r\n\r\nAllows you to set the frequency with which state updates are pushed/fetched\r\nfrom the database.  Also monitors how long the calls take and if there were\r\nany errors (such as timeouts).  The pusher/puller can also be turned off\r\nthrough this interface.\r\n\r\n## io.Instrumentation\r\n\r\nThis interface gives visibilty into Cassandra performance from Blueflood's\r\nperspective.\r\n\r\nMost exposed meters monitor how long it takes to perform some cassandra\r\noperation.  Keep in mind that the histogram values are biased towards the\r\nmost recent 5 minutes of data.\r\n\r\n### InstrumentatedConnectionPoolMonitor\r\n\r\nMonitors the rates of cassandra read and write errors.  Spikes here \r\nmay indicate systemic problems. Note that a high rate of 'Pool Exhausted'\r\nexceptions with a multi-node Cassandra cluster is to be expected and not\r\nproblematic (except when seen alongside operation timeouts).\r\n","google":"UA-42769648-1","note":"Don't delete this file! It's used internally to help with page regeneration."}